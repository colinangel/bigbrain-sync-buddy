<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>BigBrain Spotify Playlist Sync</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, #1db954, #191414);
            min-height: 100vh;
            color: white;
        }

        .container {
            max-width: 800px;
            margin: 0 auto;
            padding: 40px 20px;
        }

        .header {
            text-align: center;
            margin-bottom: 40px;
        }

        .logo {
            font-size: 36px;
            font-weight: bold;
            margin-bottom: 10px;
        }
        .subtitle {
            font-size: 18px;
            opacity: 0.8;
        }

        .card {
            background: rgba(255, 255, 255, 0.1);
            border-radius: 16px;
            padding: 24px;
            margin-bottom: 24px;
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.1);
        }

        .accounts-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 24px;
            margin-bottom: 24px;
        }

        .account-card {
            text-align: center;
            padding: 20px;
        }

        .account-title {
            font-size: 18px;
            font-weight: 600;
            margin-bottom: 16px;
        }

        .account-status {
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 8px;
            margin-bottom: 16px;
        }
        .status-dot {
            width: 12px;
            height: 12px;
            border-radius: 50%;
            background: #ff4444;
        }

        .status-dot.connected {
            background: #1db954;
        }

        .user-name {
            font-weight: 500;
        }

        .btn {
            background: rgba(255, 255, 255, 0.2);
            border: 1px solid rgba(255, 255, 255, 0.3);
            color: white;
            padding: 12px 24px;
            border-radius: 25px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 500;
            transition: all 0.3s ease;
            text-decoration: none;
            display: inline-block;
            min-width: 140px;
        }

        .btn:hover {
            background: rgba(255, 255, 255, 0.3);
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.3);
        }

        .btn.primary {
            background: #1db954;
            border-color: #1db954;
        }
        .btn.primary:hover {
            background: #1ed760;
        }

        .btn.danger {
            background: #ff4444;
            border-color: #ff4444;
        }

        .btn.danger:hover {
            background: #ff6666;
        }

        .btn:disabled {
            opacity: 0.5;
            cursor: not-allowed;
            transform: none;
        }

        .sync-section {
            text-align: center;
        }

        .sync-stats {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
            gap: 16px;
            margin-bottom: 24px;
        }

        .stat {
            text-align: center;
        }

        .stat-number {
            font-size: 28px;
            font-weight: bold;
            color: #1db954;
            display: block;
        }
        .stat-label {
            font-size: 12px;
            opacity: 0.8;
            margin-top: 4px;
        }

        .last-sync {
            font-size: 14px;
            opacity: 0.7;
            margin-bottom: 24px;
        }

        .sync-buttons {
            display: flex;
            gap: 16px;
            justify-content: center;
            flex-wrap: wrap;
        }

        .logs-section {
            max-height: 300px;
            overflow-y: auto;
            background: rgba(0, 0, 0, 0.3);
            border-radius: 8px;
            padding: 16px;
        }

        .log-entry {
            padding: 6px 0;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
            font-size: 13px;
            display: flex;
            align-items: flex-start;
            gap: 8px;
        }

        .log-entry:last-child {
            border-bottom: none;
        }
        .log-time {
            color: #888;
            font-size: 11px;
            min-width: 60px;
            flex-shrink: 0;
        }

        .log-type {
            min-width: 50px;
            font-weight: 600;
            font-size: 11px;
            flex-shrink: 0;
        }

        .log-type.info { color: #4CAF50; }
        .log-type.warn { color: #FF9800; }
        .log-type.error { color: #F44336; }

        .log-message {
            flex: 1;
        }

        .hidden {
            display: none;
        }

        .loading {
            display: inline-block;
            width: 16px;
            height: 16px;
            border: 2px solid rgba(255, 255, 255, 0.3);
            border-top: 2px solid white;
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin-right: 8px;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        @media (max-width: 600px) {
            .accounts-grid {
                grid-template-columns: 1fr;
            }

            .sync-buttons {
                flex-direction: column;
                align-items: center;
            }
        }

        .status-indicator {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 8px 16px;
            border-radius: 20px;
            font-size: 12px;
            font-weight: 500;
            background: rgba(0, 0, 0, 0.7);
            backdrop-filter: blur(10px);
        }

        .status-indicator.syncing {
            background: rgba(29, 185, 84, 0.8);
        }

        .notification {
            position: fixed;
            top: 20px;
            left: 50%;
            transform: translateX(-50%);
            padding: 12px 24px;
            border-radius: 8px;
            color: white;
            font-weight: 500;
            z-index: 1000;
            animation: slideDown 0.3s ease;
        }

        .notification.success {
            background: #1db954;
        }

        .notification.error {
            background: #ff4444;
        }

        @keyframes slideDown {
            from { transform: translateX(-50%) translateY(-100%); }
            to { transform: translateX(-50%) translateY(0); }
        }

    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <div class="logo">ðŸŽµ BigBrain Spotify Playlist Sync</div>
            <% if (mode === 'incognito') { %>
                <div class="subtitle">Connect your destination account</div>
            <% } else { %>
                <div class="subtitle">One-way playlist synchronization</div>
            <% } %>
        </div>

        <% if (mode === 'incognito') { %>
            <!-- Incognito mode - only show destination connection -->
            <div class="card">
                <div style="text-align: center;">
                    <div class="account-card">
                        <div class="account-title">Connect Your Destination Account</div>
                        <div class="account-status">
                            <div class="status-dot"></div>
                            <span class="user-name">Ready to connect</span>
                        </div>
                        <a href="<%= authUrls.destination %>" class="btn primary">Connect to Spotify</a>
                        
                        <div style="margin-top: 20px; padding: 16px; background: rgba(255, 255, 255, 0.1); border-radius: 8px; font-size: 14px; line-height: 1.5;">
                            <strong>Instructions:</strong><br>
                            1. Click the button above to connect to Spotify<br>
                            2. Login with your <strong>destination</strong> account<br>
                            3. After successful connection, you can close this window<br>
                            4. Return to the main window to start syncing
                        </div>
                    </div>
                </div>
            </div>
        <% } else { %>
            <!-- Normal mode - full interface -->
            <div class="card">
            <div class="accounts-grid">
                <div class="account-card">
                    <div class="account-title">Source Account</div>
                    <div class="account-status">
                        <div class="status-dot <%= appState.sourceToken ? 'connected' : '' %>"></div>
                        <span class="user-name">
                            <%= appState.sourceUser ? appState.sourceUser.display_name : 'Not connected' %>
                        </span>
                    </div>
                    <% if (!appState.sourceToken) { %>
                        <a href="<%= authUrls.source %>" class="btn">Connect Source</a>
                    <% } else { %>
                        <div class="btn" style="opacity: 0.7;">âœ“ Connected</div>
                        <br><br>
                        <a href="<%= authUrls.source %>" class="btn" style="font-size: 11px; padding: 6px 12px;">Switch Account</a>
                    <% } %>
                </div>

                <div class="account-card">
                    <div class="account-title">Destination Account</div>
                    <div class="account-status">
                        <div class="status-dot <%= appState.destToken ? 'connected' : '' %>"></div>
                        <span class="user-name">
                            <%= appState.destUser ? appState.destUser.display_name : 'Not connected' %>
                        </span>
                    </div>
                    <% if (!appState.destToken) { %>
                        <div style="margin-top: 16px; padding: 12px; background: rgba(255, 255, 255, 0.1); border-radius: 8px; font-size: 12px; line-height: 1.4;">
                            <strong>ðŸ’¡ To connect a different account:</strong><br>
                            Open this URL in an incognito window:<br>
                            <div style="margin: 8px 0; padding: 8px; background: rgba(0, 0, 0, 0.2); border-radius: 4px; font-family: monospace; word-break: break-all; font-size: 11px;">
                                <%= appUrl %>?mode=incognito
                            </div>
                            Then return here after connecting.
                        </div>
                    <% } else { %>
                        <div class="btn" style="opacity: 0.7;">âœ“ Connected</div>
                        <div style="margin-top: 12px; font-size: 11px; opacity: 0.7;">
                            To switch accounts, use incognito mode with the URL above
                        </div>
                    <% } %>
                </div>
            </div>
        </div>

        <% if (appState.isSetup) { %>
        <div class="card">
            <div class="sync-section">
                <div class="sync-stats">
                    <div class="stat">
                        <span class="stat-number"><%= appState.syncStats.playlists || 0 %></span>
                        <div class="stat-label">Playlists Synced</div>
                    </div>
                    <div class="stat">
                        <span class="stat-number"><%= appState.syncStats.tracks || 0 %></span>
                        <div class="stat-label">Total Tracks</div>
                    </div>
                    <% if (appState.syncStats.newPlaylists !== undefined) { %>
                    <div class="stat">
                        <span class="stat-number"><%= appState.syncStats.newPlaylists || 0 %></span>
                        <div class="stat-label">New Playlists</div>
                    </div>
                    <div class="stat">
                        <span class="stat-number"><%= appState.syncStats.newTracks || 0 %></span>
                        <div class="stat-label">New Tracks</div>
                    </div>
                    <% } %>
                </div>

                <div class="last-sync">
                    <% if (appState.lastSync) { %>
                        Last sync: <%= new Date(appState.lastSync).toLocaleString() %>
                    <% } else { %>
                        Never synced
                    <% } %>
                </div>

                <!-- Sync Interval Controls -->
                <div class="sync-interval-section" style="margin-bottom: 24px;">
                    <h4 style="font-size: 16px; margin-bottom: 12px; opacity: 0.9;">Auto-Sync Frequency</h4>
                    <div style="display: flex; justify-content: center; align-items: center;">
                        <select id="interval-select" style="padding: 10px 16px; border-radius: 8px; border: 1px solid rgba(255,255,255,0.3); background: rgba(255,255,255,0.1); color: white; font-size: 14px; cursor: pointer; min-width: 180px;">
                            <option value="1">1 minute</option>
                            <option value="5">5 minutes</option>
                            <option value="10">10 minutes</option>
                            <option value="15">15 minutes</option>
                            <option value="30">30 minutes</option>
                            <option value="60">1 hour</option>
                            <option value="120">2 hours</option>
                            <option value="240">4 hours</option>
                            <option value="480">8 hours</option>
                            <option value="720">12 hours</option>
                            <option value="1440">24 hours</option>
                        </select>
                    </div>
                    <div id="current-interval" style="font-size: 12px; opacity: 0.7; margin-top: 8px;">
                        Current: <span id="interval-display"><%= appState.syncInterval || 30 %> minutes</span>
                    </div>
                </div>

                <div class="sync-buttons">
                    <button class="btn primary" id="sync-btn" <%= appState.syncInProgress ? 'disabled' : '' %>>
                        <% if (appState.syncInProgress) { %>
                            <span class="loading"></span>Syncing...
                        <% } else { %>
                            Sync Now
                        <% } %>
                    </button>
                    <button class="btn danger" id="disconnect-btn">Disconnect All</button>
                </div>
            </div>
        </div>
        <% } %>

        <% if (appState.logs && appState.logs.length > 0) { %>
        <div class="card">
            <h3 style="margin-bottom: 16px; font-size: 18px;">Activity Log</h3>
            <div class="logs-section">
                <% appState.logs.slice(0, 20).forEach(log => { %>
                    <div class="log-entry">
                        <span class="log-time"><%= new Date(log.timestamp).toLocaleTimeString() %></span>
                        <span class="log-type <%= log.type %>"><%= log.type.toUpperCase() %></span>
                        <span class="log-message"><%= log.message %></span>
                    </div>
                <% }); %>
            </div>
        </div>
        <% } %>
    </div>
    <% } %>

    <div class="status-indicator <%= appState.syncInProgress ? 'syncing' : '' %>" id="status-indicator">
        <% if (appState.syncInProgress) { %>
            <span class="loading"></span>Syncing...
        <% } else if (appState.isSetup) { %>
            Ready
        <% } else { %>
            Setup Required
        <% } %>
    </div>

    <script>
        // Notification system
        function showNotification(message, type = 'info') {
            const notification = document.createElement('div');
            notification.className = `notification ${type}`;
            notification.textContent = message;
            document.body.appendChild(notification);

            setTimeout(() => {
                notification.remove();
            }, 4000);
        }
        // Initialize interval controls
        function initializeIntervalControls() {
            const currentInterval = <%= appState.syncInterval || 30 %>;
            const select = document.getElementById('interval-select');
            if (select) {
                select.value = currentInterval.toString();
            }
            updateIntervalDisplay(currentInterval);
        }

        // Update interval display
        function updateIntervalDisplay(interval) {
            const display = document.getElementById('interval-display');
            if (display) {
                if (interval >= 60) {
                    const hours = interval / 60;
                    display.textContent = hours % 1 === 0 ? `${hours} hour${hours > 1 ? 's' : ''}` : `${interval} minutes`;
                } else {
                    display.textContent = `${interval} minute${interval > 1 ? 's' : ''}`;
                }
            }
        }

        // Set sync interval
        async function setSyncInterval(minutes) {
            try {
                // Disable select during update
                const select = document.getElementById('interval-select');
                if (select) select.disabled = true;

                const response = await fetch('/sync-interval', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ interval: minutes })
                });

                // Check if response is ok before parsing JSON
                if (!response.ok) {
                    const text = await response.text();
                    console.error('Server response:', text);
                    throw new Error(`Server error: ${response.status} ${response.statusText}`);
                }

                const result = await response.json();

                if (result.success) {
                    updateIntervalDisplay(minutes);
                    showNotification(`Sync interval updated to ${minutes >= 60 ? Math.floor(minutes/60) + ' hour' + (minutes >= 120 ? 's' : '') : minutes + ' minute' + (minutes > 1 ? 's' : '')}`, 'success');
                } else {
                    showNotification('Failed to update sync interval: ' + result.error, 'error');
                    // Revert select to previous value
                    if (select) {
                        const currentInterval = <%= appState.syncInterval || 30 %>;
                        select.value = currentInterval.toString();
                    }
                }
            } catch (error) {
                showNotification('Error updating sync interval: ' + error.message, 'error');
                // Revert select to previous value
                const select = document.getElementById('interval-select');
                if (select) {
                    const currentInterval = <%= appState.syncInterval || 30 %>;
                    select.value = currentInterval.toString();
                }
            } finally {
                // Re-enable select
                const select = document.getElementById('interval-select');
                if (select) select.disabled = false;
            }
        }

        // Interval control event listeners
        document.addEventListener('DOMContentLoaded', () => {
            initializeIntervalControls();

            // Auto-update interval on selection change
            document.getElementById('interval-select')?.addEventListener('change', (e) => {
                const minutes = parseInt(e.target.value);
                setSyncInterval(minutes);
            });
        });

        // Auto-refresh status every 10 seconds
        setInterval(async () => {
            try {
                const response = await fetch('/status');
                const status = await response.json();

                // Update sync button
                const syncBtn = document.getElementById('sync-btn');
                if (syncBtn) {
                    if (status.syncInProgress) {
                        syncBtn.innerHTML = '<span class="loading"></span>Syncing...';
                        syncBtn.disabled = true;
                    } else {
                        syncBtn.innerHTML = 'Sync Now';
                        syncBtn.disabled = false;
                    }
                }

                // Update status indicator
                const statusIndicator = document.getElementById('status-indicator');
                if (statusIndicator) {
                    if (status.syncInProgress) {
                        statusIndicator.innerHTML = '<span class="loading"></span>Syncing...';
                        statusIndicator.className = 'status-indicator syncing';
                    } else if (status.isSetup) {
                        statusIndicator.innerHTML = 'Ready';
                        statusIndicator.className = 'status-indicator';
                    } else {
                        statusIndicator.innerHTML = 'Setup Required';
                        statusIndicator.className = 'status-indicator';
                    }
                }

                // Update sync interval if changed externally
                if (status.syncInterval !== undefined) {
                    const select = document.getElementById('interval-select');
                    if (select && select.value !== status.syncInterval.toString()) {
                        select.value = status.syncInterval.toString();
                    }
                    updateIntervalDisplay(status.syncInterval);
                }

                // Refresh page if new logs appeared
                if (status.logs && status.logs.length > 0 &&
                    status.logs[0].timestamp !== '<%= appState.logs[0]?.timestamp %>') {
                    location.reload();
                }

            } catch (error) {
                console.error('Status update failed:', error);
            }
        }, 10000);

        // Sync button handler
        document.getElementById('sync-btn')?.addEventListener('click', async () => {
            const syncBtn = document.getElementById('sync-btn');
            const originalText = syncBtn.innerHTML;

            try {
                // Update button state
                syncBtn.innerHTML = '<span class="loading"></span>Syncing...';
                syncBtn.disabled = true;

                const controller = new AbortController();
                const timeoutId = setTimeout(() => controller.abort(), 60000); // 60 second timeout

                const response = await fetch('/sync', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    signal: controller.signal
                });

                clearTimeout(timeoutId);

                // Check if response is ok
                if (!response.ok) {
                    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                }

                const result = await response.json();
                console.log('Sync result:', result);

                if (result.success) {
                    // Show success message briefly before reload
                    syncBtn.innerHTML = 'âœ… Sync Complete!';
                    syncBtn.style.background = '#1db954';
                    setTimeout(() => location.reload(), 2000);
                } else {
                    throw new Error(result.error || 'Sync failed');
                }
            } catch (error) {
                console.error('Sync request failed:', error);

                // Reset button
                syncBtn.innerHTML = originalText;
                syncBtn.disabled = false;
                syncBtn.style.background = '';

                if (error.name === 'AbortError') {
                    showNotification('Sync is taking longer than expected. Check the activity log for progress.', 'error');
                } else {
                    showNotification('Sync failed: ' + error.message, 'error');
                }
            }
        });

        // Disconnect button handler
        document.getElementById('disconnect-btn')?.addEventListener('click', async () => {
            if (confirm('This will disconnect all accounts and stop syncing. Continue?')) {
                try {
                    await fetch('/disconnect', { method: 'POST' });
                    location.reload();
                } catch (error) {
                    alert('Disconnect failed: ' + error.message);
                }
            }
        });
    </script>
</body>
</html>